--library IEEE;
--use IEEE.std_logic_1164.all;
--
--entity DE2_115 is
-- port(CLOCK_50 : in std_logic;
--		KEY : in std_logic_vector(0 downto 0);
--		LEDR : out std_logic_vector(15 downto 0)
--		);
--end entity; 

architecture structural of DE2_115 is
	component rom IS
	PORT
	(
		address		: IN STD_LOGIC_VECTOR (11 DOWNTO 0);
		clock		: IN STD_LOGIC  := '1';
		q		: OUT STD_LOGIC_VECTOR (15 DOWNTO 0)
	);
	END component;

	component Clock_Divider is
		port (clk,reset_n: in std_logic;
			clock_out: out std_logic);
	end component;
	
	component signal_generator is
		port (clock, reset_n : in std_logic;
			data_in : in std_logic_vector(15 downto 0);
			data_out : out std_logic_vector(15 downto 0);
			addr : out std_logic_vector(11 downto 0)
			);
	end component;
	
	component signal_filter is
		generic(data_size : natural := 101);
		port (clock : in std_logic;
				reset_n : in std_logic;
				data_in : in std_logic_vector(15 downto 0);
				data_out : out std_logic_vector(15 downto 0)
				);
	end component;
	
	signal clock_400hz : std_logic;
	signal sig_gen_addr : std_logic_vector(11 downto 0);
	signal sig_gen_data_in : std_logic_vector(15 downto 0);
	signal sig_gen_data_out : std_logic_vector(15 downto 0);
	
begin

	rom1 	: rom port map (address => sig_gen_addr, clock => CLOCK_50, q => sig_gen_data_in);
	cd1	: Clock_Divider port map (clk => CLOCK_50, reset_n => KEY(0), clock_out => clock_400hz);
	sg1	: signal_generator port map (clock => clock_400hz, reset_n => KEY(0), data_in => sig_gen_data_in, data_out => sig_gen_data_out, addr => sig_gen_addr);
	sf1	: signal_filter port map (clock => clock_400hz, reset_n => KEY(0), data_in => sig_gen_data_out, data_out => LEDR);

end architecture; 