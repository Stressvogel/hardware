// Custom_qsys_vga_subsystem_char_buf_subsystem.v

// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module Custom_qsys_vga_subsystem_char_buf_subsystem (
		input  wire        avalon_char_source_ready,          //     avalon_char_source.ready
		output wire        avalon_char_source_startofpacket,  //                       .startofpacket
		output wire        avalon_char_source_endofpacket,    //                       .endofpacket
		output wire        avalon_char_source_valid,          //                       .valid
		output wire [39:0] avalon_char_source_data,           //                       .data
		input  wire [1:0]  char_buf_control_slave_address,    // char_buf_control_slave.address
		input  wire [3:0]  char_buf_control_slave_byteenable, //                       .byteenable
		input  wire        char_buf_control_slave_read,       //                       .read
		input  wire        char_buf_control_slave_write,      //                       .write
		input  wire [31:0] char_buf_control_slave_writedata,  //                       .writedata
		output wire [31:0] char_buf_control_slave_readdata,   //                       .readdata
		input  wire [10:0] char_buf_slave_address,            //         char_buf_slave.address
		input  wire        char_buf_slave_clken,              //                       .clken
		input  wire        char_buf_slave_chipselect,         //                       .chipselect
		input  wire        char_buf_slave_write,              //                       .write
		output wire [31:0] char_buf_slave_readdata,           //                       .readdata
		input  wire [31:0] char_buf_slave_writedata,          //                       .writedata
		input  wire [3:0]  char_buf_slave_byteenable,         //                       .byteenable
		input  wire        sys_clk_clk,                       //                sys_clk.clk
		input  wire        sys_reset_reset_n                  //              sys_reset.reset_n
	);

	wire         video_ascii_to_image_0_avalon_image_source_valid;                  // video_ascii_to_image_0:image_out_valid -> video_rgb_resampler_0:stream_in_valid
	wire         video_ascii_to_image_0_avalon_image_source_data;                   // video_ascii_to_image_0:image_out_data -> video_rgb_resampler_0:stream_in_data
	wire         video_ascii_to_image_0_avalon_image_source_ready;                  // video_rgb_resampler_0:stream_in_ready -> video_ascii_to_image_0:image_out_ready
	wire         video_ascii_to_image_0_avalon_image_source_startofpacket;          // video_ascii_to_image_0:image_out_startofpacket -> video_rgb_resampler_0:stream_in_startofpacket
	wire         video_ascii_to_image_0_avalon_image_source_endofpacket;            // video_ascii_to_image_0:image_out_endofpacket -> video_rgb_resampler_0:stream_in_endofpacket
	wire         video_dma_controller_0_avalon_pixel_source_valid;                  // video_dma_controller_0:stream_valid -> video_scaler_0:stream_in_valid
	wire   [7:0] video_dma_controller_0_avalon_pixel_source_data;                   // video_dma_controller_0:stream_data -> video_scaler_0:stream_in_data
	wire         video_dma_controller_0_avalon_pixel_source_ready;                  // video_scaler_0:stream_in_ready -> video_dma_controller_0:stream_ready
	wire         video_dma_controller_0_avalon_pixel_source_startofpacket;          // video_dma_controller_0:stream_startofpacket -> video_scaler_0:stream_in_startofpacket
	wire         video_dma_controller_0_avalon_pixel_source_endofpacket;            // video_dma_controller_0:stream_endofpacket -> video_scaler_0:stream_in_endofpacket
	wire         video_rgb_resampler_0_avalon_rgb_source_valid;                     // video_rgb_resampler_0:stream_out_valid -> video_change_alpha_0:stream_in_valid
	wire  [39:0] video_rgb_resampler_0_avalon_rgb_source_data;                      // video_rgb_resampler_0:stream_out_data -> video_change_alpha_0:stream_in_data
	wire         video_rgb_resampler_0_avalon_rgb_source_ready;                     // video_change_alpha_0:stream_in_ready -> video_rgb_resampler_0:stream_out_ready
	wire         video_rgb_resampler_0_avalon_rgb_source_startofpacket;             // video_rgb_resampler_0:stream_out_startofpacket -> video_change_alpha_0:stream_in_startofpacket
	wire         video_rgb_resampler_0_avalon_rgb_source_endofpacket;               // video_rgb_resampler_0:stream_out_endofpacket -> video_change_alpha_0:stream_in_endofpacket
	wire         video_scaler_0_avalon_scaler_source_valid;                         // video_scaler_0:stream_out_valid -> video_ascii_to_image_0:ascii_in_valid
	wire   [7:0] video_scaler_0_avalon_scaler_source_data;                          // video_scaler_0:stream_out_data -> video_ascii_to_image_0:ascii_in_data
	wire         video_scaler_0_avalon_scaler_source_ready;                         // video_ascii_to_image_0:ascii_in_ready -> video_scaler_0:stream_out_ready
	wire   [5:0] video_scaler_0_avalon_scaler_source_channel;                       // video_scaler_0:stream_out_channel -> video_ascii_to_image_0:ascii_in_channel
	wire         video_scaler_0_avalon_scaler_source_startofpacket;                 // video_scaler_0:stream_out_startofpacket -> video_ascii_to_image_0:ascii_in_startofpacket
	wire         video_scaler_0_avalon_scaler_source_endofpacket;                   // video_scaler_0:stream_out_endofpacket -> video_ascii_to_image_0:ascii_in_endofpacket
	wire         video_dma_controller_0_avalon_dma_master_waitrequest;              // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_waitrequest -> video_dma_controller_0:master_waitrequest
	wire   [7:0] video_dma_controller_0_avalon_dma_master_readdata;                 // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_readdata -> video_dma_controller_0:master_readdata
	wire  [31:0] video_dma_controller_0_avalon_dma_master_address;                  // video_dma_controller_0:master_address -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_address
	wire         video_dma_controller_0_avalon_dma_master_read;                     // video_dma_controller_0:master_read -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_read
	wire         video_dma_controller_0_avalon_dma_master_readdatavalid;            // mm_interconnect_0:video_dma_controller_0_avalon_dma_master_readdatavalid -> video_dma_controller_0:master_readdatavalid
	wire         video_dma_controller_0_avalon_dma_master_lock;                     // video_dma_controller_0:master_arbiterlock -> mm_interconnect_0:video_dma_controller_0_avalon_dma_master_lock
	wire  [31:0] mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_readdata; // video_rgb_resampler_0:slave_readdata -> mm_interconnect_0:video_rgb_resampler_0_avalon_rgb_slave_readdata
	wire         mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_read;     // mm_interconnect_0:video_rgb_resampler_0_avalon_rgb_slave_read -> video_rgb_resampler_0:slave_read
	wire         mm_interconnect_0_onchip_memory2_0_s2_chipselect;                  // mm_interconnect_0:onchip_memory2_0_s2_chipselect -> onchip_memory2_0:chipselect2
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s2_readdata;                    // onchip_memory2_0:readdata2 -> mm_interconnect_0:onchip_memory2_0_s2_readdata
	wire  [10:0] mm_interconnect_0_onchip_memory2_0_s2_address;                     // mm_interconnect_0:onchip_memory2_0_s2_address -> onchip_memory2_0:address2
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s2_byteenable;                  // mm_interconnect_0:onchip_memory2_0_s2_byteenable -> onchip_memory2_0:byteenable2
	wire         mm_interconnect_0_onchip_memory2_0_s2_write;                       // mm_interconnect_0:onchip_memory2_0_s2_write -> onchip_memory2_0:write2
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s2_writedata;                   // mm_interconnect_0:onchip_memory2_0_s2_writedata -> onchip_memory2_0:writedata2
	wire         mm_interconnect_0_onchip_memory2_0_s2_clken;                       // mm_interconnect_0:onchip_memory2_0_s2_clken -> onchip_memory2_0:clken2
	wire         rst_controller_reset_out_reset;                                    // rst_controller:reset_out -> [mm_interconnect_0:video_dma_controller_0_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset, rst_translator:in_reset, video_ascii_to_image_0:reset, video_change_alpha_0:reset, video_dma_controller_0:reset, video_rgb_resampler_0:reset, video_scaler_0:reset]
	wire         rst_controller_reset_out_reset_req;                                // rst_controller:reset_req -> [onchip_memory2_0:reset_req, rst_translator:reset_req_in]

	Custom_qsys_vga_subsystem_char_buf_subsystem_onchip_memory2_0 onchip_memory2_0 (
		.address     (char_buf_slave_address),                           //     s1.address
		.clken       (char_buf_slave_clken),                             //       .clken
		.chipselect  (char_buf_slave_chipselect),                        //       .chipselect
		.write       (char_buf_slave_write),                             //       .write
		.readdata    (char_buf_slave_readdata),                          //       .readdata
		.writedata   (char_buf_slave_writedata),                         //       .writedata
		.byteenable  (char_buf_slave_byteenable),                        //       .byteenable
		.address2    (mm_interconnect_0_onchip_memory2_0_s2_address),    //     s2.address
		.chipselect2 (mm_interconnect_0_onchip_memory2_0_s2_chipselect), //       .chipselect
		.clken2      (mm_interconnect_0_onchip_memory2_0_s2_clken),      //       .clken
		.write2      (mm_interconnect_0_onchip_memory2_0_s2_write),      //       .write
		.readdata2   (mm_interconnect_0_onchip_memory2_0_s2_readdata),   //       .readdata
		.writedata2  (mm_interconnect_0_onchip_memory2_0_s2_writedata),  //       .writedata
		.byteenable2 (mm_interconnect_0_onchip_memory2_0_s2_byteenable), //       .byteenable
		.clk         (sys_clk_clk),                                      //   clk1.clk
		.reset       (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),               //       .reset_req
		.freeze      (1'b0)                                              // (terminated)
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_video_ascii_to_image_0 video_ascii_to_image_0 (
		.clk                     (sys_clk_clk),                                              //                 clk.clk
		.reset                   (rst_controller_reset_out_reset),                           //               reset.reset
		.ascii_in_channel        (video_scaler_0_avalon_scaler_source_channel),              //   avalon_ascii_sink.channel
		.ascii_in_startofpacket  (video_scaler_0_avalon_scaler_source_startofpacket),        //                    .startofpacket
		.ascii_in_endofpacket    (video_scaler_0_avalon_scaler_source_endofpacket),          //                    .endofpacket
		.ascii_in_valid          (video_scaler_0_avalon_scaler_source_valid),                //                    .valid
		.ascii_in_ready          (video_scaler_0_avalon_scaler_source_ready),                //                    .ready
		.ascii_in_data           (video_scaler_0_avalon_scaler_source_data),                 //                    .data
		.image_out_ready         (video_ascii_to_image_0_avalon_image_source_ready),         // avalon_image_source.ready
		.image_out_startofpacket (video_ascii_to_image_0_avalon_image_source_startofpacket), //                    .startofpacket
		.image_out_endofpacket   (video_ascii_to_image_0_avalon_image_source_endofpacket),   //                    .endofpacket
		.image_out_valid         (video_ascii_to_image_0_avalon_image_source_valid),         //                    .valid
		.image_out_data          (video_ascii_to_image_0_avalon_image_source_data)           //                    .data
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_video_change_alpha_0 video_change_alpha_0 (
		.clk                      (sys_clk_clk),                                           //                       clk.clk
		.reset                    (rst_controller_reset_out_reset),                        //                     reset.reset
		.stream_in_startofpacket  (video_rgb_resampler_0_avalon_rgb_source_startofpacket), //   avalon_apply_alpha_sink.startofpacket
		.stream_in_endofpacket    (video_rgb_resampler_0_avalon_rgb_source_endofpacket),   //                          .endofpacket
		.stream_in_valid          (video_rgb_resampler_0_avalon_rgb_source_valid),         //                          .valid
		.stream_in_ready          (video_rgb_resampler_0_avalon_rgb_source_ready),         //                          .ready
		.stream_in_data           (video_rgb_resampler_0_avalon_rgb_source_data),          //                          .data
		.stream_out_ready         (avalon_char_source_ready),                              // avalon_apply_alpha_source.ready
		.stream_out_startofpacket (avalon_char_source_startofpacket),                      //                          .startofpacket
		.stream_out_endofpacket   (avalon_char_source_endofpacket),                        //                          .endofpacket
		.stream_out_valid         (avalon_char_source_valid),                              //                          .valid
		.stream_out_data          (avalon_char_source_data)                                //                          .data
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_video_dma_controller_0 video_dma_controller_0 (
		.clk                  (sys_clk_clk),                                              //                      clk.clk
		.reset                (rst_controller_reset_out_reset),                           //                    reset.reset
		.master_address       (video_dma_controller_0_avalon_dma_master_address),         //        avalon_dma_master.address
		.master_waitrequest   (video_dma_controller_0_avalon_dma_master_waitrequest),     //                         .waitrequest
		.master_arbiterlock   (video_dma_controller_0_avalon_dma_master_lock),            //                         .lock
		.master_read          (video_dma_controller_0_avalon_dma_master_read),            //                         .read
		.master_readdata      (video_dma_controller_0_avalon_dma_master_readdata),        //                         .readdata
		.master_readdatavalid (video_dma_controller_0_avalon_dma_master_readdatavalid),   //                         .readdatavalid
		.slave_address        (char_buf_control_slave_address),                           // avalon_dma_control_slave.address
		.slave_byteenable     (char_buf_control_slave_byteenable),                        //                         .byteenable
		.slave_read           (char_buf_control_slave_read),                              //                         .read
		.slave_write          (char_buf_control_slave_write),                             //                         .write
		.slave_writedata      (char_buf_control_slave_writedata),                         //                         .writedata
		.slave_readdata       (char_buf_control_slave_readdata),                          //                         .readdata
		.stream_ready         (video_dma_controller_0_avalon_pixel_source_ready),         //      avalon_pixel_source.ready
		.stream_data          (video_dma_controller_0_avalon_pixel_source_data),          //                         .data
		.stream_startofpacket (video_dma_controller_0_avalon_pixel_source_startofpacket), //                         .startofpacket
		.stream_endofpacket   (video_dma_controller_0_avalon_pixel_source_endofpacket),   //                         .endofpacket
		.stream_valid         (video_dma_controller_0_avalon_pixel_source_valid)          //                         .valid
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_video_rgb_resampler_0 video_rgb_resampler_0 (
		.clk                      (sys_clk_clk),                                                       //               clk.clk
		.reset                    (rst_controller_reset_out_reset),                                    //             reset.reset
		.stream_in_startofpacket  (video_ascii_to_image_0_avalon_image_source_startofpacket),          //   avalon_rgb_sink.startofpacket
		.stream_in_endofpacket    (video_ascii_to_image_0_avalon_image_source_endofpacket),            //                  .endofpacket
		.stream_in_valid          (video_ascii_to_image_0_avalon_image_source_valid),                  //                  .valid
		.stream_in_ready          (video_ascii_to_image_0_avalon_image_source_ready),                  //                  .ready
		.stream_in_data           (video_ascii_to_image_0_avalon_image_source_data),                   //                  .data
		.slave_read               (mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_read),     //  avalon_rgb_slave.read
		.slave_readdata           (mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_readdata), //                  .readdata
		.stream_out_ready         (video_rgb_resampler_0_avalon_rgb_source_ready),                     // avalon_rgb_source.ready
		.stream_out_startofpacket (video_rgb_resampler_0_avalon_rgb_source_startofpacket),             //                  .startofpacket
		.stream_out_endofpacket   (video_rgb_resampler_0_avalon_rgb_source_endofpacket),               //                  .endofpacket
		.stream_out_valid         (video_rgb_resampler_0_avalon_rgb_source_valid),                     //                  .valid
		.stream_out_data          (video_rgb_resampler_0_avalon_rgb_source_data)                       //                  .data
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_video_scaler_0 video_scaler_0 (
		.clk                      (sys_clk_clk),                                              //                  clk.clk
		.reset                    (rst_controller_reset_out_reset),                           //                reset.reset
		.stream_in_startofpacket  (video_dma_controller_0_avalon_pixel_source_startofpacket), //   avalon_scaler_sink.startofpacket
		.stream_in_endofpacket    (video_dma_controller_0_avalon_pixel_source_endofpacket),   //                     .endofpacket
		.stream_in_valid          (video_dma_controller_0_avalon_pixel_source_valid),         //                     .valid
		.stream_in_ready          (video_dma_controller_0_avalon_pixel_source_ready),         //                     .ready
		.stream_in_data           (video_dma_controller_0_avalon_pixel_source_data),          //                     .data
		.stream_out_ready         (video_scaler_0_avalon_scaler_source_ready),                // avalon_scaler_source.ready
		.stream_out_startofpacket (video_scaler_0_avalon_scaler_source_startofpacket),        //                     .startofpacket
		.stream_out_endofpacket   (video_scaler_0_avalon_scaler_source_endofpacket),          //                     .endofpacket
		.stream_out_valid         (video_scaler_0_avalon_scaler_source_valid),                //                     .valid
		.stream_out_data          (video_scaler_0_avalon_scaler_source_data),                 //                     .data
		.stream_out_channel       (video_scaler_0_avalon_scaler_source_channel)               //                     .channel
	);

	Custom_qsys_vga_subsystem_char_buf_subsystem_mm_interconnect_0 mm_interconnect_0 (
		.sys_clk_clk_clk                                          (sys_clk_clk),                                                       //                                        sys_clk_clk.clk
		.video_dma_controller_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                    // video_dma_controller_0_reset_reset_bridge_in_reset.reset
		.video_dma_controller_0_avalon_dma_master_address         (video_dma_controller_0_avalon_dma_master_address),                  //           video_dma_controller_0_avalon_dma_master.address
		.video_dma_controller_0_avalon_dma_master_waitrequest     (video_dma_controller_0_avalon_dma_master_waitrequest),              //                                                   .waitrequest
		.video_dma_controller_0_avalon_dma_master_read            (video_dma_controller_0_avalon_dma_master_read),                     //                                                   .read
		.video_dma_controller_0_avalon_dma_master_readdata        (video_dma_controller_0_avalon_dma_master_readdata),                 //                                                   .readdata
		.video_dma_controller_0_avalon_dma_master_readdatavalid   (video_dma_controller_0_avalon_dma_master_readdatavalid),            //                                                   .readdatavalid
		.video_dma_controller_0_avalon_dma_master_lock            (video_dma_controller_0_avalon_dma_master_lock),                     //                                                   .lock
		.onchip_memory2_0_s2_address                              (mm_interconnect_0_onchip_memory2_0_s2_address),                     //                                onchip_memory2_0_s2.address
		.onchip_memory2_0_s2_write                                (mm_interconnect_0_onchip_memory2_0_s2_write),                       //                                                   .write
		.onchip_memory2_0_s2_readdata                             (mm_interconnect_0_onchip_memory2_0_s2_readdata),                    //                                                   .readdata
		.onchip_memory2_0_s2_writedata                            (mm_interconnect_0_onchip_memory2_0_s2_writedata),                   //                                                   .writedata
		.onchip_memory2_0_s2_byteenable                           (mm_interconnect_0_onchip_memory2_0_s2_byteenable),                  //                                                   .byteenable
		.onchip_memory2_0_s2_chipselect                           (mm_interconnect_0_onchip_memory2_0_s2_chipselect),                  //                                                   .chipselect
		.onchip_memory2_0_s2_clken                                (mm_interconnect_0_onchip_memory2_0_s2_clken),                       //                                                   .clken
		.video_rgb_resampler_0_avalon_rgb_slave_read              (mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_read),     //             video_rgb_resampler_0_avalon_rgb_slave.read
		.video_rgb_resampler_0_avalon_rgb_slave_readdata          (mm_interconnect_0_video_rgb_resampler_0_avalon_rgb_slave_readdata)  //                                                   .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~sys_reset_reset_n),                 // reset_in0.reset
		.clk            (sys_clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
